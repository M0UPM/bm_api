#!/bin/bash
#
# Written (probably badly) by Dave M0UPM
# as a cli api tool for use with BrandMeister
#
# Check we're root....
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run the api tool\n"
  exit 1
fi
#
# Check if key file exists
bm_key=/opt/bm_api/bm_key
if [ ! -f "${bm_key}" ]; then
echo -e "No api key found at /opt/bm_api/bm_key, would you like to paste your key here now for setup? yes/no"
read -r keyanswer
fi

if [[ ${keyanswer} == "yes" ]]; then
echo -e "Paste key and press enter"
read -r keyentry
echo -e "${keyentry}" >> /opt/bm_api/bm_key
fi
if [[ ${keyanswer} == "no" ]]; then
echo -e "Please create key file at /opt/bm_api/bm_key" >&2; exit 1
fi
if [[ $(wc -c ${bm_key} | awk '{print $1}') -lt 200 ]]; then               #check we're using a v2 key, if not bail
echo -e "Non V2 key detected, please update your key" >&2; exit 1
fi

#
# Set some variables
bmurl="https://api.brandmeister.network/v2/device"
bm_api_key=$(cat /opt/bm_api/bm_key)
num='^[0-9]+$'
#
# On to questions and dealing with the answers
#
echo -e "Please choose one of the following options\n\n1. list subscriptions\n2. Add static talkgroup\n3. Delete static talk group\n4. Drop current call from slot"
read -r option
if ! [[ ${option} =~ ${num} ]]; then                                       #check its a number, if not bail
echo "Option selected must be a number......Exiting" >&2; exit 1
fi
if [[ ${option} -ge 5 ]]; then                                             # make sure we pick a valid option
echo -e "Please enter a valid selection 1-4" >&2; exit 1
fi
echo -e "\nPlease enter device id"
read -r id

if ! [[ ${id} =~ ${num} ]]; then                                           #check its a number, if not bail
echo "Device id must be a number.....Exiting" >&2; exit 1
fi
#
# Now we can get on with it...
#

if [[ ${option} == "1" ]]; then
 curl --progress-bar -X 'GET' \
  "${bmurl}/${id}/talkgroup" \
  -H 'accept: application/json' | jq
   echo -e "Done"
fi

if [[ ${option} == "2" ]]; then
echo -e "\nPlease enter slot number"
read -r slot
  if ! [[ ${slot} =~ ${num} ]]; then                                      #check its a number if not......you get the idea by now 
    echo -e "Slot must be a number" >&2; exit 1
  fi
echo -e "\nPlease enter talk group number"
read -r tg
  if ! [[ ${tg} =~ ${num} ]]; then
  echo -e "Talk group must be a number" >&2; exit 1
  fi

 curl -X 'POST' \
  "${bmurl}/${id}/talkgroup" \
  -H 'accept: application/json' \
  -H "Authorization: Bearer ${bm_api_key}" \
  -H 'Content-Type: application/json' \
  -d '{"slot": '${slot}', "group": '${tg}'}'
   echo -e "\nAdding talk group ${tg} to slot ${slot}"
   echo -e "\nListing current talk groups"
   curl --progress-bar -X 'GET' \
  "${bmurl}/${id}/talkgroup" \
  -H 'accept: application/json' | jq
   echo -e "Done"
fi

if [[ ${option} == "3" ]]; then
echo -e "\nPlease enter slot number"
read -r slot
   if ! [[ ${slot} =~ ${num} ]]; then
    echo -e "Slot must be a number" >&2; exit 1
   fi
echo -e "\nPlease enter talk group number"
read -r tg
   if ! [[ ${tg} =~ ${num} ]]; then
    echo -e "Talk group must be a number" >&2; exit 1
   fi

 curl -X 'DELETE' \
 "${bmurl}/${id}/talkgroup/${slot}/${tg}" \
  -H 'accept: */*' \
  -H "Authorization: Bearer ${bm_api_key}"
   echo -e "\nRemoving talk group ${tg} from slot ${slot}"
   echo -e "\nListing current talk groups"
    curl --progress-bar -X 'GET' \
  "${bmurl}/${id}/talkgroup" \
  -H 'accept: application/json' | jq
   echo -e "Done"
fi

if [[ ${option} == "4" ]]; then
echo -e "Please enter slot to drop call"
read -r slot

curl -X 'GET' \
  "${bmurl}/${id}/action/dropCallRoute/${slot}" \
  -H 'accept: application/json' \
  -H "Authorization: Bearer ${bm_api_key}"
echo -e "\nCall dropped"
fi 
